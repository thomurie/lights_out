{"ast":null,"code":"var _jsxFileName = \"/Users/thomasurie/Documents/Programming/Springboard/Node, Express, React/React/react-lights-out/src/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board({\n  nrows = 3,\n  ncols = 3,\n  chanceLightStartsOn = 0.5\n}) {\n  _s();\n\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = [];\n\n    function arrBools() {\n      const arr = [];\n      let temp = ncols;\n\n      while (ncols > 0) {\n        let num = Math.floor(Math.random() * 100);\n\n        if (num <= 100 * chanceLightStartsOn) {\n          arr.push({\n            bool: true,\n            cord: `${nrows}-${ncols}`\n          });\n        } else {\n          arr.push({\n            bool: false,\n            cord: `${nrows}-${ncols}`\n          });\n        }\n\n        ncols--;\n      }\n\n      ncols = temp;\n      return arr;\n    }\n\n    while (nrows > 0) {\n      initialBoard.push(arrBools());\n      nrows--;\n    }\n\n    console.log(initialBoard); // TODO: create array-of-arrays of true/false values\n\n    return initialBoard;\n  }\n\n  function hasWon() {// TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n    });\n  }\n\n  function flipCell(e) {\n    console.log(e.target);\n  } // if the game is won, just show a winning msg & render nothing else\n  // TODO\n  // make table board\n  // TODO\n\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map(r => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: r.map(e => /*#__PURE__*/_jsxDEV(Cell, {\n            isLit: e.bool,\n            cord: e.cord\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/thomasurie/Documents/Programming/Springboard/Node, Express, React/React/react-lights-out/src/Board.js"],"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","arrBools","arr","temp","num","Math","floor","random","push","bool","cord","console","log","hasWon","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","e","target","r"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 3, ncols = 3, chanceLightStartsOn = 0.5 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n\n    function arrBools() {\n      const arr = [];\n      let temp = ncols;\n      while (ncols > 0) {\n        let num = Math.floor(Math.random() * 100);\n        if (num <= 100 * chanceLightStartsOn) {\n          arr.push({ bool: true, cord: `${nrows}-${ncols}` });\n        } else {\n          arr.push({ bool: false, cord: `${nrows}-${ncols}` });\n        }\n        ncols--;\n      }\n      ncols = temp;\n      return arr;\n    }\n\n    while (nrows > 0) {\n      initialBoard.push(arrBools());\n      nrows--;\n    }\n\n    console.log(initialBoard);\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard((oldBoard) => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  function flipCell(e) {\n    console.log(e.target);\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n  return (\n    <table>\n      <tbody>\n        {board.map((r) => {\n          return (\n            <tr>\n              {r.map((e) => (\n                <Cell isLit={e.bool} cord={e.cord} />\n              ))}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}