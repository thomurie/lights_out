{"ast":null,"code":"var _jsxFileName = \"/Users/thomasurie/Documents/Programming/Springboard/Node, Express, React/React/react-lights-out/src/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board({\n  nrows = 3,\n  ncols = 3,\n  chanceLightStartsOn = 0.5\n}) {\n  _s();\n\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = [];\n    let rowCounter = 0;\n    let colCounter = 0;\n\n    function arrBools() {\n      const arr = [];\n      let temp = ncols;\n\n      while (colCounter < ncols) {\n        let num = Math.floor(Math.random() * 100);\n\n        if (num <= 100 * chanceLightStartsOn) {\n          arr.push({\n            bool: true,\n            cord: `${rowCounter}-${colCounter}`\n          });\n        } else {\n          arr.push({\n            bool: false,\n            cord: `${rowCounter}-${colCounter}`\n          });\n        }\n\n        colCounter++;\n      }\n\n      ncols = temp;\n      return arr;\n    }\n\n    while (rowCounter < nrows) {\n      initialBoard.push(arrBools());\n      colCounter = 0;\n      rowCounter++;\n    } // TODO: create array-of-arrays of true/false values\n\n\n    return initialBoard;\n  }\n\n  function hasWon() {// TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n    });\n  }\n\n  function flipCell(e) {\n    // Extract target cordinates\n    let [x, y] = e.target.getAttribute(\"data-cord\").split(\"-\").map(c => parseInt(c)); // Deep Copy Array\n\n    const boardCopy = Array.from(board); // Get Cordinates of surrounding items\n\n    const surroundingCords = getCords(x, y); // Flip boolean values T = F / F = T\n    // Set the value in the board\n\n    surroundingCords.forEach(c => {\n      let [a, b] = c;\n      boardCopy[a][b].bool = !boardCopy[a][b].bool;\n    });\n\n    if (boardCopy.every(row => row.every(col => col.bool === false))) {\n      alert(\"Congratulations, you won!\");\n    }\n\n    return setBoard(boardCopy); // console.log(boardCopy);\n  }\n\n  function getCords(x, y) {\n    // top\n    const ax = x - 1 > -1 ? x - 1 : null;\n    const ay = y; // left\n\n    const bx = x;\n    const by = y - 1 > -1 ? y - 1 : null; // right\n\n    const cx = x;\n    const cy = y + 1 < ncols ? y + 1 : null; // bottom\n\n    const dx = x + 1 < nrows ? x + 1 : null;\n    const dy = y;\n    const surrounding = [[ax, ay], [bx, by], [x, y], [cx, cy], [dx, dy]]; // filter out null values\n\n    const cords = surrounding.filter(a => a[0] !== null && a[1] !== null);\n    return cords;\n  } // if the game is won, just show a winning msg & render nothing else\n  // TODO\n  // make table board\n  // TODO\n\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map(r => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: r.map(e => /*#__PURE__*/_jsxDEV(Cell, {\n            isLit: e.bool,\n            cord: e.cord,\n            flipCellsAroundMe: flipCell\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/thomasurie/Documents/Programming/Springboard/Node, Express, React/React/react-lights-out/src/Board.js"],"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","rowCounter","colCounter","arrBools","arr","temp","num","Math","floor","random","push","bool","cord","hasWon","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","e","target","getAttribute","c","parseInt","Array","from","surroundingCords","getCords","forEach","a","b","every","row","col","alert","ax","ay","bx","by","cx","cy","dx","dy","surrounding","cords","filter","r"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 3, ncols = 3, chanceLightStartsOn = 0.5 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    let rowCounter = 0;\n    let colCounter = 0;\n\n    function arrBools() {\n      const arr = [];\n      let temp = ncols;\n      while (colCounter < ncols) {\n        let num = Math.floor(Math.random() * 100);\n        if (num <= 100 * chanceLightStartsOn) {\n          arr.push({ bool: true, cord: `${rowCounter}-${colCounter}` });\n        } else {\n          arr.push({ bool: false, cord: `${rowCounter}-${colCounter}` });\n        }\n        colCounter++;\n      }\n      ncols = temp;\n      return arr;\n    }\n\n    while (rowCounter < nrows) {\n      initialBoard.push(arrBools());\n      colCounter = 0;\n      rowCounter++;\n    }\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard((oldBoard) => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  function flipCell(e) {\n    // Extract target cordinates\n    let [x, y] = e.target\n      .getAttribute(\"data-cord\")\n      .split(\"-\")\n      .map((c) => parseInt(c));\n\n    // Deep Copy Array\n    const boardCopy = Array.from(board);\n\n    // Get Cordinates of surrounding items\n    const surroundingCords = getCords(x, y);\n    // Flip boolean values T = F / F = T\n    // Set the value in the board\n    surroundingCords.forEach((c) => {\n      let [a, b] = c;\n      boardCopy[a][b].bool = !boardCopy[a][b].bool;\n    });\n    if (boardCopy.every((row) => row.every((col) => col.bool === false))) {\n      alert(\"Congratulations, you won!\");\n    }\n    return setBoard(boardCopy);\n    // console.log(boardCopy);\n  }\n\n  function getCords(x, y) {\n    // top\n    const ax = x - 1 > -1 ? x - 1 : null;\n    const ay = y;\n    // left\n    const bx = x;\n    const by = y - 1 > -1 ? y - 1 : null;\n    // right\n    const cx = x;\n    const cy = y + 1 < ncols ? y + 1 : null;\n    // bottom\n    const dx = x + 1 < nrows ? x + 1 : null;\n    const dy = y;\n\n    const surrounding = [\n      [ax, ay],\n      [bx, by],\n      [x, y],\n      [cx, cy],\n      [dx, dy],\n    ];\n\n    // filter out null values\n    const cords = surrounding.filter((a) => a[0] !== null && a[1] !== null);\n    return cords;\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n  return (\n    <table>\n      <tbody>\n        {board.map((r) => {\n          return (\n            <tr>\n              {r.map((e) => (\n                <Cell\n                  isLit={e.bool}\n                  cord={e.cord}\n                  flipCellsAroundMe={flipCell}\n                />\n              ))}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}