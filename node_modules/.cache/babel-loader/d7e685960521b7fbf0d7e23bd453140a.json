{"ast":null,"code":"var _jsxFileName = \"/Users/thomasurie/Documents/Programming/Springboard/Node, Express, React/React/react-lights-out/src/Cell.js\";\nimport React from \"react\";\nimport \"./Cell.css\";\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cell({\n  flipCellsAroundMe,\n  isLit,\n  cord\n}) {\n  const classes = `Cell ${isLit ? \"Cell-lit\" : \"\"}`;\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    \"data-cord\": cord,\n    className: classes,\n    onClick: flipCellsAroundMe\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n} // function createBoard() {\n//   let initialBoard = [];\n//   function arrBools() {\n//     const arr = [];\n//     let temp = ncols;\n//     while (ncols > 0) {\n//       let num = Math.floor(Math.random() * 100);\n//       if (num <= 100 * chanceLightStartsOn) {\n//         arr.push({ bool: true, cord: `${nrows}-${ncols}` });\n//       } else {\n//         arr.push({ bool: false, cord: `${nrows}-${ncols}` });\n//       }\n//       ncols--;\n//     }\n//     ncols = temp;\n//     return arr;\n//   }\n//   while (nrows > 0) {\n//     initialBoard.push(arrBools());\n//     nrows--;\n//   }\n//   console.log(initialBoard);\n//   // TODO: create array-of-arrays of true/false values\n//   return initialBoard;\n// }\n\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/thomasurie/Documents/Programming/Springboard/Node, Express, React/React/react-lights-out/src/Cell.js"],"names":["React","Cell","flipCellsAroundMe","isLit","cord","classes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA,iBAAF;AAAqBC,EAAAA,KAArB;AAA4BC,EAAAA;AAA5B,CAAd,EAAkD;AAChD,QAAMC,OAAO,GAAI,QAAOF,KAAK,GAAG,UAAH,GAAgB,EAAG,EAAhD;AACA,sBACE;AAAI,iBAAWC,IAAf;AAAqB,IAAA,SAAS,EAAEC,OAAhC;AAAyC,IAAA,OAAO,EAAEH;AAAlD;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,C,CAED;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;KAlCSD,I;AAoCT,eAAeA,IAAf","sourcesContent":["import React from \"react\";\nimport \"./Cell.css\";\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nfunction Cell({ flipCellsAroundMe, isLit, cord }) {\n  const classes = `Cell ${isLit ? \"Cell-lit\" : \"\"}`;\n  return (\n    <td data-cord={cord} className={classes} onClick={flipCellsAroundMe} />\n  );\n}\n\n// function createBoard() {\n//   let initialBoard = [];\n\n//   function arrBools() {\n//     const arr = [];\n//     let temp = ncols;\n//     while (ncols > 0) {\n//       let num = Math.floor(Math.random() * 100);\n//       if (num <= 100 * chanceLightStartsOn) {\n//         arr.push({ bool: true, cord: `${nrows}-${ncols}` });\n//       } else {\n//         arr.push({ bool: false, cord: `${nrows}-${ncols}` });\n//       }\n//       ncols--;\n//     }\n//     ncols = temp;\n//     return arr;\n//   }\n\n//   while (nrows > 0) {\n//     initialBoard.push(arrBools());\n//     nrows--;\n//   }\n\n//   console.log(initialBoard);\n//   // TODO: create array-of-arrays of true/false values\n//   return initialBoard;\n// }\n\nexport default Cell;\n"]},"metadata":{},"sourceType":"module"}