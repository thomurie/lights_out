{"ast":null,"code":"var _jsxFileName = \"/Users/thomasurie/Documents/Programming/Springboard/Node, Express, React/React/react-lights-out/src/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = [];\n\n    while (nrows > 0) {\n      initialBoard.push(Array.from({\n        length: ncols\n      }, () => {\n        let num = Math.floor(Math.random() * 100);\n\n        if (num > 50) {\n          return true;\n        }\n\n        return false;\n      }));\n      nrows--;\n    }\n\n    console.log(initialBoard); // TODO: create array-of-arrays of true/false values\n\n    return initialBoard;\n  }\n\n  function hasWon() {// TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n  // TODO\n  // make table board\n  // TODO\n\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map(r => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(Cell, {\n            isLit: r[0][0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/thomasurie/Documents/Programming/Springboard/Node, Express, React/React/react-lights-out/src/Board.js"],"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","push","Array","from","length","num","Math","floor","random","console","log","hasWon","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","r"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA;AAAhB,CAAf,EAAsD;AAAA;;AACpD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACQ,WAAW,EAAZ,CAAlC;AAEA;;AACA,WAASA,WAAT,GAAuB;AACrB,QAAIC,YAAY,GAAG,EAAnB;;AACA,WAAON,KAAK,GAAG,CAAf,EAAkB;AAChBM,MAAAA,YAAY,CAACC,IAAb,CACEC,KAAK,CAACC,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAET;AAAV,OAAX,EAA8B,MAAM;AAClC,YAAIU,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAV;;AACA,YAAIH,GAAG,GAAG,EAAV,EAAc;AACZ,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD,OAND,CADF;AASAX,MAAAA,KAAK;AACN;;AAEDe,IAAAA,OAAO,CAACC,GAAR,CAAYV,YAAZ,EAfqB,CAgBrB;;AACA,WAAOA,YAAP;AACD;;AAED,WAASW,MAAT,GAAkB,CAChB;AACD;;AAED,WAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9Bf,IAAAA,QAAQ,CAAEgB,QAAD,IAAc;AACrB,YAAM,CAACC,CAAD,EAAIC,CAAJ,IAASH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAAf;;AAEA,YAAMC,QAAQ,GAAG,CAACL,CAAD,EAAIC,CAAJ,EAAOK,SAAP,KAAqB;AACpC;AAEA,YAAIL,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGrB,KAAd,IAAuBoB,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGrB,KAAzC,EAAgD;AAC9C2B,UAAAA,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,IAAkB,CAACK,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,CAAnB;AACD;AACF,OAND,CAHqB,CAWrB;AAEA;AAEA;;AACD,KAhBO,CAAR;AAiBD,GA9CmD,CAgDpD;AAEA;AAEA;AAEA;;;AACA,sBACE;AAAA,2BACE;AAAA,gBACGnB,KAAK,CAACqB,GAAN,CAAWI,CAAD,IAAO;AAChB,4BACE;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,KAAK,EAAEA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD,OANA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GApEQ7B,K;;KAAAA,K;AAsET,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    while (nrows > 0) {\n      initialBoard.push(\n        Array.from({ length: ncols }, () => {\n          let num = Math.floor(Math.random() * 100);\n          if (num > 50) {\n            return true;\n          }\n          return false;\n        })\n      );\n      nrows--;\n    }\n\n    console.log(initialBoard);\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard((oldBoard) => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n  return (\n    <table>\n      <tbody>\n        {board.map((r) => {\n          return (\n            <tr>\n              <Cell isLit={r[0][0]} />\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}